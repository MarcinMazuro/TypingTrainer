import tkinter as tk
import time


LINE_SIZE = 35
MIN_TEXT_SIZE = 150


class GUI:
    def __init__(self, keys_to_use):
        self.keys_to_use = keys_to_use
        
        # Create the main window
        self.root = tk.Tk()
        self.root.title("Typing Trainer")
        self.root.geometry("800x300")  # Larger window for longer sentences

        # Create a timer label
        self.time_label = tk.Label(self.root, text="Time: 00:00", font=("Helvetica", 16))
        self.time_label.pack(pady=10)
        
        # Track start time (using list for mutability)
        self.start_time = [time.time()]

        # Frame for characters
        self.letter_frames = tk.Frame(self.root)
        self.letter_frames.pack(pady=20)
        
        # Currently displayed sentence
        self.current_text = [""]
        
        # Index to track the current character
        self.current_index = [0]
        
        # Initialize timer
        self.update_timer()
        
        # Generate and display initial sentence
        self.create_new_sentence()
        
        # Bind key press events to the root window
        self.root.bind("<KeyPress>", self.on_key_press)
    
    def display_text(self, text):
        # Remove previous labels
        for widget in self.letter_frames.winfo_children():
            widget.destroy()
        
        column = 0
        row = 0
        
        # Create new labels for each character
        for i, char in enumerate(text):
            # If character exceeds line size, move to the next line
            if column > LINE_SIZE:
                column = 0
                row += 1

            display_char = char

            if display_char == ' ' and column == 0:
                continue
                
            letter_label = tk.Label(self.letter_frames, text=display_char, font=("Helvetica", 24), 
                                  borderwidth=0, relief="flat")
            letter_label.grid(row=row, column=column, padx=0)

            column += 1
    
    def update_timer(self):
        # Calculate elapsed time
        elapsed_time = time.time() - self.start_time[0]
        minutes = int(elapsed_time // 60)
        seconds = int(elapsed_time % 60)
        time_str = f"Time: {minutes:02d}:{seconds:02d}"
        
        # Update the label
        self.time_label.config(text=time_str)
        self.time_label.after(1000, self.update_timer)
    
    def create_new_sentence(self):
        new_text = create_sentence(self.keys_to_use)
        self.current_text[0] = new_text
        self.display_text(new_text)
        self.current_index[0] = 0
    
    def on_key_press(self, event):
        if len(self.letter_frames.winfo_children()) == 0:
            self.create_new_sentence()
            return

        # Special key handling
        if event.keysym == "space":
            pressed_char = ' '
        elif event.keysym == "period":
            pressed_char = '.'
        elif event.keysym == "comma":
            pressed_char = ','
        else:
            pressed_char = event.char

        if self.current_index[0] < len(self.current_text[0]) and pressed_char == self.current_text[0][self.current_index[0]]:
            # Change the color of correctly typed character to green
            letter_labels = self.letter_frames.winfo_children()
            if self.current_index[0] < len(letter_labels):
                letter_labels[self.current_index[0]].config(foreground="green", font=("Helvetica", 24, "bold"))
            
            self.current_index[0] += 1  # Move to the next character

        else:
            # Change the color of incorrectly typed character to red
            letter_labels = self.letter_frames.winfo_children()
            if self.current_index[0] < len(letter_labels):
                letter_labels[self.current_index[0]].config(foreground="red", font=("Helvetica", 24, "bold"))
            
            self.current_index[0] += 1  # Move to the next character

        # New sentence
        if self.current_index[0] == len(self.current_text[0]):
            self.create_new_sentence()
    
    def run(self):
        # Run the application
        self.root.mainloop()